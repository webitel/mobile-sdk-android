syntax = "proto3";
package webitel.portal;
option go_package = "webitel.go/api/portal;portal";

// PUSH Subscription
// https://core.telegram.org/api/push-updates#subscribing-to-notifications
message DevicePush {
  // PUSH Token kind
  oneof token {
    
    // [F]irebase [C]loud [M]essaging Service (firebase token for google firebase)
    string FCM = 1;
    
    // [A]pple [P]ush [N]otification Service (device token for apple push)
    string APN = 2;
    
    // // 3 - MPNS (channel URI for microsoft push)
    // string MPNS = 3;
    
    // // 4 - Simple push (endpoint for firefox's deprecated simple push API): note that this push type can also be used by an open source push notification spec like UnifiedPush Â».
    // // Simple push works by sending a simple PUT request with a version=number payload to the specified HTTPS endpoint every time a relevant message is received: upon receiving such a notification, clients should connect to the MTProto API and fetch updates.
    // // (Note that the number won't necessarily be incremental in Telegram's implementation, just treat each distinct request as a signal that a new message is waiting to be fetched via MTProto).
    // string PUSH = 4;
    // // 5 - Ubuntu phone (token for ubuntu push)
    // // 6 - Blackberry (token for blackberry push)
    // // 7 - MTProto separate session
    // // 8 - WNS (windows push)
    // string WNS = 8;
    // // 9 - APNS VoIP (token for apple push VoIP)
    // // 10 - Web push (web push, see below)
    // // 11 - MPNS VoIP (token for microsoft push VoIP)
    // // 12 - Tizen (token for tizen push)
    
    // For 10 web push, the token must be a JSON-encoded object with the following keys:
    // endpoint: Absolute URL exposed by the push service where the application server can send push messages
    // keys: P-256 elliptic curve Diffie-Hellman parameters in the following object
    // p256dh: Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
    // auth: Base64url-encoded authentication secret
    WebPush web = 10;
  }
  // For FCM and APNS VoIP, optional encryption key used to encrypt push notifications
  string secret = 20;
}

// // device token for apple push
// message APNsVoIP {
//   string token = 1;
//   string secret = 2;
// }

// // device token for apple push
// message FCMVoIP {
//   string token = 1;
//   string secret = 2;
// }

// WebPUSH subscription
message WebPush {
  // endpoint: Absolute URL exposed by the push service where the application server can send push messages
  string endpoint = 1;
  
  // keys: P-256 elliptic curve Diffie-Hellman parameters in the following object
  // p256dh: Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
  // auth: Base64url-encoded authentication secret
  message Key {
    // auth: Base64url-encoded authentication secret
    bytes auth = 1;
    // p256dh: Base64url-encoded P-256 elliptic curve Diffie-Hellman public key
    bytes p256dh = 2;
  }

  // P-256 elliptic curve Diffie-Hellman parameters
  Key key = 2;
}